/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface Auction1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "auctions"
      | "createAuction"
      | "nextAuctionId"
      | "playerBid"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextAuctionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playerBid",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAuctionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playerBid", data: BytesLike): Result;
}

export interface Auction1 extends BaseContract {
  connect(runner?: ContractRunner | null): Auction1;
  waitForDeployment(): Promise<this>;

  interface: Auction1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  auctions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        bigint
      ] & {
        seller: string;
        duration: bigint;
        startPrice: bigint;
        startTime: bigint;
        ended: boolean;
        highestBidder: string;
        highestBid: bigint;
        nftContract: string;
        tokenId: bigint;
      }
    ],
    "view"
  >;

  createAuction: TypedContractMethod<
    [
      _duration: BigNumberish,
      _startPrice: BigNumberish,
      _nftContract: AddressLike,
      _tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  nextAuctionId: TypedContractMethod<[], [bigint], "view">;

  playerBid: TypedContractMethod<[_auctionId: BigNumberish], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        bigint
      ] & {
        seller: string;
        duration: bigint;
        startPrice: bigint;
        startTime: bigint;
        ended: boolean;
        highestBidder: string;
        highestBid: bigint;
        nftContract: string;
        tokenId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [
      _duration: BigNumberish,
      _startPrice: BigNumberish,
      _nftContract: AddressLike,
      _tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextAuctionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "playerBid"
  ): TypedContractMethod<[_auctionId: BigNumberish], [void], "payable">;

  filters: {};
}
